continue
print sf
a
s
n
s
n
s
continue
shape
n
s
n
s
exit
shape
n
obj
klass
n
shape
n
s
n
s
exit
c
exit
c
exit
Digest::SHA2.hexdigest(members.zip(values).join)
Digest::SHA2.hexdigest(members.zip(values))
c
n
members.zip(values).inspect
exit
members.zip values
inspect
exit
exit 
n 
shape.inspect
Digest::SHA2.hexdigest(shape.inspect) 
exit
c
@hash
c
@hash
c
@hash
c
@hash
shape.inspect
exit
container2.hash
container1.hash
container2
container1
container
exit
shape.class.name
shape.class
shape
name
n
exit
name
n
name
exit
container.nil
c
exit
@container.bytes
@container.size
@container
exit
container.present
container.size
container.remain + container.used
container.remain
exit
container.bytes.size
continue
container.bytes.size
container.bytes
container.used
container.size
exit
container.size
container.values
container.present
container.nil
exit
container.nil
container.members
container.populated
exit
container.present
exit
container.present
exit
container
container.present
exit
container.members.filter { |m| !container[m].nil? }
container.members.filter
container.members
container.used
exit
container.used
continue
exit
container.each do |k,v| 
container
container.when
container.where
container
container.members.filter(&:itself)
container.filter(&:itself).zip(container.members)
container.members
zip(container.filter(&:itself),container.members)
members
zip(container.filter(&:itself),members)
container.filter(&:itself)
container.filter(&:)
container.filter(&:true)
container.filter(&:)
container.filter { |k| k }
container.filter { |k| }
container.filter
container.filter { |k| k}
container.filter { |k,v| v }
container.filter { |k,v| k }
container.filter { |k,v| v.nil? }
container.filter { |k,v| !v.nil? }
container.filter(&:nil?)
container.filter(&:!nil?)
container.filter(&:nil?)
container.filter(&:nil)
container.filter
container
container.values
container.members
container.shape
container.size
container
container.shape
container.members
container.size
container.bytes
container
exit
container.bytes
container.bytes.string
exit
container.bytes.string
c
container.bytes.string
c
container.bytes.string
container.bytes
container
exit
c
exit
container.bytes
exit
container
@bytes_missing
container.bytes
c
container.bytes
container.string
container.size
container
continue
container.size
container
container.size
exit
container.size
container.bytes.size
container.bytes
container
exit
bytes
exit
c
sf
s
c
n
bytes.string
bytes
c
n
bytes.string
bytes
n
bytes.string
n
bytes.respond_to? :read
bytes
puts b.string
puts b
shape
c
bytes
exit
bytes
c
file
c
puts b.string
puts b
exit
continue
puts b.string
shape
c
puts b
puts b.string
print b.string
print b
shape
c
b.string
print b
b
shape
c
shape
n
shape
c
shape
c
shape
exit
@shape1
shape1
container2
container1
container
exit
container
cotnainer
continue
container
exit
@bytes.string
@bytes.inspect
@bytes
bytes
container
