continue
container.members.size
container.sizeof
container.size
container.members
container
container.shape
exit
container.struct
container.shape
exit
container.struct
container.shape
exit
container
container.struct
exit
container
container.struct
exit
container.struct
exit
container.bytes
container
exit
container.bytes('')
container.bytes
container
exit
container
exit
container.bytes
container
exit
bytes
container
exit
continue
ls
clear
continue
print b.string
b
exit
c[:e_type]
n
"#{f}#{e}"
a
c[a]
print s >> 3
print f
print s
s
n
puts e
print n
list 17
print b
b
exit
container
exit
xit
bytes.string
container
exit
container
bytes.string
bytes
continue
bytes
bytes.string.read(4)
bytes.string
bytes
continue
bytes.string.scan(/(..){2}/).map(&:reverse).join
bytes.string
bytes
bytes.string.scan(/(..){2}/).map(&:reverse).join
bytes.string.scan(/(..){4}/).map(&:reverse).join
bytes.string.scan(/(..){3}/).map(&:reverse).join
bytes.string.scan(/(..){2}/).map(&:reverse).join
bytes.string.scan(/(..){1}/).map(&:reverse).join
bytes.string.scan(/(..)/).map(&:reverse).join
bytes.string.scan(/(..){2}/).map(&:reverse).join
bytes.string.scan(/(..){4}/).map(&:reverse).join
bytes.string
bytes
exit
b
exit
container.e_type
container
c
b.read(16>>3)
b
b = StringIO.new @bytes64
@bytes64
container
exit
container
exit
container
exit
klass.new.class
klass.new.name
klass.new
klass
exit
klass.new.class
klass.new.name
klass.new
klass
exit
name.to_sym
name
exit
klass.class
klass.name
klass.new
klass
exit
klass.new
klass.class.name
klass.class
klass.name
klass
exit
klass
up
s
name
exit
@mapper.hash
@mapper.struct
exit
@mapper.struct
